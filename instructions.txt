Setting up the OS:
-In order to hook the exec system call, we have to use an edited version of the Ubuntu operating system. There are two versions of the instructions for this: if we provided you with the .deb files and if you’re compiling the OS on your own.



-Provided with *.deb files:

	  1) Run this command: sudo dpkg -i linux*4.8.0-17.19*.deb

	  2) The numbers in this command may need to be changed to match the numbers in your own *.deb files.

	  3) Now type sudo reboot to restart the machine. While restarting, hold down the shift key to bring up the grub menu. From this menu, be sure to select your version of the OS that you just compiled.



- Compiling your own OS:

  1) Start by cloning the appropriate git repo: git clone git://kernel.ubuntu.com/ubuntu/ubuntu-xenial.git

  2) Add:

     a. EXPORT_SYMBOL(do_execve) to ~/ubuntu-xenial/fs/exec.c

     b.	EXPORT_SYMBOL(getname) to ~/ubuntu-xenial/fs/namei.c

  3) Check source code in system settings"->"software & updates"->"Source code" to allow for some library installs

  4) Run sudo apt-get install libncurses5-dev libncursesw5-dev

  5) Run sudo apt-get build-dep linux-image-$(uname -r)

  6) To compile the OS code, change into the topmost directory (ubuntu-xenial) and run:

     a. fakeroot debian/rules clean

     b. fakeroot debian/rules binary-headers binary-generic binary-perarch

  7) Once compilation is complete, there should be several linux-*.deb files in the home directory. In order to use these, you must run the following command:

     a. sudo dpkg -i linux*4.8.0-17.19*.deb

     b.	The numbers in this command may need to be changed to match the numbers in your own *.deb files.

  8) Now type sudo reboot to restart the machine. While restarting, hold down the shift key to bring up the grub menu. From this menu, be sure to select your version of the OS that you just compiled.



Getting the code:
- You will need to grab the code for the module as well as the database. Much of the code is centered around the directory structure that I used. You will have to account for this.

  1) Create an outermost directory called pm.

  2) Create another directory within pm called pm-linux.

  3) Then clone the repository into this directory.

  4) If you want to use the tests already in the repo, you will have to edit all of the paths in the repo to resolve to your directories.

     a. ~/pm/pm-linux/testing/user-tests (You need to edit all of the paths in the individual files in this directory by changing the user in the path from kfulton to your own username.)



Setting up for testing:
- In order to use the tests provided in the repo, you will need to take the following steps:

  1) You will need to make three new users for your system. The first will be named Jeff. The second Alice. The third Susan. To create a new user you need to use the following command: adduser *name*

  2) Once you have these users created, you need to edit the executable they run when they login. To do this, you need to type sudo vipw. Once the password file opens, you need to add the following line in the last entry in place of /bin/bash: /home/*your username*/pm/pm-linux/policy-shell/shell

  3) Now you need to copy the code for each user from the ~/pm/pm-linux/testing/user-tests to each users' home directory respectively. You will also need to compile the code within each users' home directory: gcc susanidexample.c -o idexample

  4) You need to set the permission on each of the files in ~/pm/pm-linux/testing/pm-test-files so that the other users can read and write them. Use this command: chmod 666 *name of file*


Running Code:

	1) First, compile the kernel module. To do this, go to ~/pm/pm-linux/kernel-pm. Then type make.

	2) In a separate terminal tab, go to ~/pm/pm-linux/policy-machine-code/executables. Load the LinuxPm.sql file into mysql.

	3) In this same tab, switch to ~/pm/pm-linux/policy-machine-code/policy-machine/build/pm

	4) Finally, open a third tab.

	5) Now, insert the kernel module. Do this by going back to the first tab and running: sudo insmod kernel-pm.ko

	6) Now go to the second tab, and run the policy machine: java -cp ~/pm/pm-linux/policy-machine-code/policy-machine/dist/lib/LinuxPM.jar:mysql-connector-java-5.1.31-bin.jar -Djava.library.path=. pm.PMAccess

	7) In the third tab, login to a user (jeff, alice, or susan) and run their code. You should see the following output for each:

	   a. jeff

	      Opened hello.txt
	      Opened test.txt
	      Opened test1.txt

	   b. alice

	      Opened hello.txt
	      Opened test.txt
	      Wrote test.txt
	      Opened test1.txt
	      Read test1.txt

	   c. susan
	   
	   Opened hello.txt
	   Read hello.txt
	   Wrote hello.txt
	   Opened test.txt
	   Opened test1.txt



Kernel Module:
- Here you will find a few things to be considered about the kernel module:

  1) It assumes that all the policy machine relevant files are in one central directory: currently pm-test-files.

  2) We’re only enforcing read and write system calls at the moment.



Database:
- Here you will find some things that should be considered about the current Database implementation:

  1) Must manually add users, objects, and relationships

  2) Assumes all users are added with actual names

  3) Assumes objects are added as filename


Dependencies:

	1) Need to compile kernel for exec (could provide .deb files?)

	4) MySql is already setup on their machine

	5) Running ubuntu system


Future Work:

       1) Enforce things like ls

       2) Code to add users and files to DB easier

       3) Code to add users to system easier

